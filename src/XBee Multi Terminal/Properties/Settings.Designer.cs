//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.ComponentModel;

namespace XBee_Multi_Terminal.Properties
{


    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "14.0.0.0")]
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase
    {

        private static Settings defaultInstance = ((Settings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Settings())));

        string[] portnames = { "COM1", "COM2", "COM3", "COM4", "COM5", "COM6", "COM7", "COM8", "COM9", "COM10",
                               "COM11", "COM12", "COM13", "COM14", "COM15", "COM16", "COM17", "COM18", "COM19", "COM20",
                               "COM21", "COM22", "COM23", "COM24", "COM25", "COM26", "COM27", "COM28", "COM29", "COM30" };

        public static Settings Default
        {
            get
            {
                return defaultInstance;
            }
        }

        /// <summary>
        /// Baud rate of serial port. Typically 9600, 19200, 38400, 57600 or 115200.
        /// </summary>
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Configuration.SettingsDescriptionAttribute("Baud rate of XBee modem. Typically 9600, 19200, 38400, 57600 or 115200.")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("9600")]
        [Category("Serial")]
        [Description("Baud rate of XBee modem. Typically 9600, 19200, 38400, 57600 or 115200.")]
        public int BaudRate
        {
            get
            {
                return ((int)(this["BaudRate"]));
            }
            set
            {
                if (value > 0 && value < 5000000) this["BaudRate"] = value;
            }
        }

        /// <summary>
        /// Communications port name.
        /// </summary>
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Configuration.SettingsDescriptionAttribute("Communications port name.")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("COM1")]
        [Category("Serial")]
        [Description("Communications port name.")]
        public string PortName
        {
            get
            {
                return ((string)(this["PortName"]));
            }
            set
            {
                bool valid = false;
                foreach (string name in portnames)
                {
                    if (value.ToUpper() == name) valid = true;
                }
                if (valid) this["PortName"] = value.ToUpper();
            }
        }

        /// <summary>
        /// If set true the program will ask if you want to save any newly created terminal sessions before closing.
        /// </summary>
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Configuration.SettingsDescriptionAttribute("If set true, the program will ask if you want to save any newly created terminal s" +
            "essions before closing.")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("True")]
        [Category("Application")]
        [Description("If set true, the program will ask if you want to save any newly created terminal s" +
            "essions before closing.")]
        public bool ConfirmSaveOnExit
        {
            get
            {
                return ((bool)(this["ConfirmSaveOnExit"]));
            }
            set
            {
                this["ConfirmSaveOnExit"] = value;
            }
        }

        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("False")]
        [Category("Application")]
        [Description("If set true, the program will show the RSSI indicator on startup.")]
        public bool ShowRSSI
        {
            get
            {
                return ((bool)(this["ShowRSSI"]));
            }
            set
            {
                this["ShowRSSI"] = value;
            }
        }
    }
}